
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000000e0  00000154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000625  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000547  00000000  00000000  0000080d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000260  00000000  00000000  00000d54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000fb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000314  00000000  00000000  00000fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000011f  00000000  00000000  000012fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000141b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 ee       	ldi	r30, 0xE0	; 224
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a8 36       	cpi	r26, 0x68	; 104
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	02 d0       	rcall	.+4      	; 0x4e <main>
  4a:	48 c0       	rjmp	.+144    	; 0xdc <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <main>:
 */ 

#include <avr/io.h>
#include <avr/delay.h>
int main(void)
{
  4e:	cf 93       	push	r28
  50:	df 93       	push	r29
  52:	cd b7       	in	r28, 0x3d	; 61
  54:	de b7       	in	r29, 0x3e	; 62
  56:	28 97       	sbiw	r28, 0x08	; 8
  58:	0f b6       	in	r0, 0x3f	; 63
  5a:	f8 94       	cli
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	0f be       	out	0x3f, r0	; 63
  60:	cd bf       	out	0x3d, r28	; 61
	DDRB=0xff;
  62:	8f ef       	ldi	r24, 0xFF	; 255
  64:	87 bb       	out	0x17, r24	; 23
	unsigned char arr[8]={0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};
  66:	88 e0       	ldi	r24, 0x08	; 8
  68:	e0 e6       	ldi	r30, 0x60	; 96
  6a:	f0 e0       	ldi	r31, 0x00	; 0
  6c:	de 01       	movw	r26, r28
  6e:	11 96       	adiw	r26, 0x01	; 1
  70:	01 90       	ld	r0, Z+
  72:	0d 92       	st	X+, r0
  74:	8a 95       	dec	r24
  76:	e1 f7       	brne	.-8      	; 0x70 <main+0x22>
    /* Replace with your application code */
    while (1) 
    {
		for(int i=0; i<8;i++){
  78:	80 e0       	ldi	r24, 0x00	; 0
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	12 c0       	rjmp	.+36     	; 0xa2 <main+0x54>
		   PORTB=arr[i];
  7e:	e1 e0       	ldi	r30, 0x01	; 1
  80:	f0 e0       	ldi	r31, 0x00	; 0
  82:	ec 0f       	add	r30, r28
  84:	fd 1f       	adc	r31, r29
  86:	e8 0f       	add	r30, r24
  88:	f9 1f       	adc	r31, r25
  8a:	20 81       	ld	r18, Z
  8c:	28 bb       	out	0x18, r18	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	2f e3       	ldi	r18, 0x3F	; 63
  90:	3d e0       	ldi	r19, 0x0D	; 13
  92:	43 e0       	ldi	r20, 0x03	; 3
  94:	21 50       	subi	r18, 0x01	; 1
  96:	30 40       	sbci	r19, 0x00	; 0
  98:	40 40       	sbci	r20, 0x00	; 0
  9a:	e1 f7       	brne	.-8      	; 0x94 <main+0x46>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <main+0x50>
  9e:	00 00       	nop
	DDRB=0xff;
	unsigned char arr[8]={0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};
    /* Replace with your application code */
    while (1) 
    {
		for(int i=0; i<8;i++){
  a0:	01 96       	adiw	r24, 0x01	; 1
  a2:	88 30       	cpi	r24, 0x08	; 8
  a4:	91 05       	cpc	r25, r1
  a6:	5c f3       	brlt	.-42     	; 0x7e <main+0x30>
		   PORTB=arr[i];
		   _delay_ms(1000);
		}
		PORTB=0x00;
  a8:	18 ba       	out	0x18, r1	; 24
		for(int i=8; i>0;i--){
  aa:	88 e0       	ldi	r24, 0x08	; 8
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	12 c0       	rjmp	.+36     	; 0xd4 <main+0x86>
			PORTB=arr[i];
  b0:	e1 e0       	ldi	r30, 0x01	; 1
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	ec 0f       	add	r30, r28
  b6:	fd 1f       	adc	r31, r29
  b8:	e8 0f       	add	r30, r24
  ba:	f9 1f       	adc	r31, r25
  bc:	20 81       	ld	r18, Z
  be:	28 bb       	out	0x18, r18	; 24
  c0:	2f e3       	ldi	r18, 0x3F	; 63
  c2:	3d e0       	ldi	r19, 0x0D	; 13
  c4:	43 e0       	ldi	r20, 0x03	; 3
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	30 40       	sbci	r19, 0x00	; 0
  ca:	40 40       	sbci	r20, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x78>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x82>
  d0:	00 00       	nop
		for(int i=0; i<8;i++){
		   PORTB=arr[i];
		   _delay_ms(1000);
		}
		PORTB=0x00;
		for(int i=8; i>0;i--){
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	18 16       	cp	r1, r24
  d6:	19 06       	cpc	r1, r25
  d8:	5c f3       	brlt	.-42     	; 0xb0 <main+0x62>
  da:	ce cf       	rjmp	.-100    	; 0x78 <main+0x2a>

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>
