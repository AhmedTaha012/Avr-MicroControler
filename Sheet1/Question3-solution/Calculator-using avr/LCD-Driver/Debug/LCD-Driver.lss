
LCD-Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000004b6  0000052a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000054a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000057c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fee  00000000  00000000  00000614  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000853  00000000  00000000  00001602  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005c1  00000000  00000000  00001e55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c4  00000000  00000000  00002418  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000047b  00000000  00000000  000024dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000670  00000000  00000000  00002957  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002fc7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 eb       	ldi	r30, 0xB6	; 182
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 32       	cpi	r26, 0x20	; 32
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <main>
  8e:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <LCD_Command>:
}

void lcd_clear(void){
		LCD_Command (0x01);		/* Clear display */
		_delay_ms(2);
		LCD_Command (0x80);		/* Cursor at home position */
  96:	95 b1       	in	r25, 0x05	; 5
  98:	9f 70       	andi	r25, 0x0F	; 15
  9a:	28 2f       	mov	r18, r24
  9c:	20 7f       	andi	r18, 0xF0	; 240
  9e:	92 2b       	or	r25, r18
  a0:	95 b9       	out	0x05, r25	; 5
  a2:	95 b1       	in	r25, 0x05	; 5
  a4:	9e 7f       	andi	r25, 0xFE	; 254
  a6:	95 b9       	out	0x05, r25	; 5
  a8:	95 b1       	in	r25, 0x05	; 5
  aa:	92 60       	ori	r25, 0x02	; 2
  ac:	95 b9       	out	0x05, r25	; 5
  ae:	00 00       	nop
  b0:	95 b1       	in	r25, 0x05	; 5
  b2:	9d 7f       	andi	r25, 0xFD	; 253
  b4:	95 b9       	out	0x05, r25	; 5
  b6:	32 e4       	ldi	r19, 0x42	; 66
  b8:	3a 95       	dec	r19
  ba:	f1 f7       	brne	.-4      	; 0xb8 <LCD_Command+0x22>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <LCD_Command+0x28>
  be:	25 b1       	in	r18, 0x05	; 5
  c0:	30 e1       	ldi	r19, 0x10	; 16
  c2:	83 9f       	mul	r24, r19
  c4:	c0 01       	movw	r24, r0
  c6:	11 24       	eor	r1, r1
  c8:	92 2f       	mov	r25, r18
  ca:	9f 70       	andi	r25, 0x0F	; 15
  cc:	89 2b       	or	r24, r25
  ce:	85 b9       	out	0x05, r24	; 5
  d0:	85 b1       	in	r24, 0x05	; 5
  d2:	82 60       	ori	r24, 0x02	; 2
  d4:	85 b9       	out	0x05, r24	; 5
  d6:	00 00       	nop
  d8:	85 b1       	in	r24, 0x05	; 5
  da:	8d 7f       	andi	r24, 0xFD	; 253
  dc:	85 b9       	out	0x05, r24	; 5
  de:	83 ef       	ldi	r24, 0xF3	; 243
  e0:	91 e0       	ldi	r25, 0x01	; 1
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <LCD_Command+0x4c>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <LCD_Command+0x52>
  e8:	00 00       	nop
  ea:	08 95       	ret

000000ec <init_LCD>:
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	84 b9       	out	0x04, r24	; 4
  f0:	87 e8       	ldi	r24, 0x87	; 135
  f2:	93 e1       	ldi	r25, 0x13	; 19
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <init_LCD+0x8>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <init_LCD+0xe>
  fa:	00 00       	nop
  fc:	83 e3       	ldi	r24, 0x33	; 51
  fe:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_Command>
 102:	82 e3       	ldi	r24, 0x32	; 50
 104:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_Command>
 108:	88 e2       	ldi	r24, 0x28	; 40
 10a:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_Command>
 10e:	8c e0       	ldi	r24, 0x0C	; 12
 110:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_Command>
 114:	86 e0       	ldi	r24, 0x06	; 6
 116:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_Command>
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_Command>
 120:	08 95       	ret

00000122 <lcd_write>:
 122:	95 b1       	in	r25, 0x05	; 5
 124:	9f 70       	andi	r25, 0x0F	; 15
 126:	28 2f       	mov	r18, r24
 128:	20 7f       	andi	r18, 0xF0	; 240
 12a:	92 2b       	or	r25, r18
 12c:	95 b9       	out	0x05, r25	; 5
 12e:	95 b1       	in	r25, 0x05	; 5
 130:	91 60       	ori	r25, 0x01	; 1
 132:	95 b9       	out	0x05, r25	; 5
 134:	95 b1       	in	r25, 0x05	; 5
 136:	92 60       	ori	r25, 0x02	; 2
 138:	95 b9       	out	0x05, r25	; 5
 13a:	00 00       	nop
 13c:	95 b1       	in	r25, 0x05	; 5
 13e:	9d 7f       	andi	r25, 0xFD	; 253
 140:	95 b9       	out	0x05, r25	; 5
 142:	32 e4       	ldi	r19, 0x42	; 66
 144:	3a 95       	dec	r19
 146:	f1 f7       	brne	.-4      	; 0x144 <lcd_write+0x22>
 148:	00 c0       	rjmp	.+0      	; 0x14a <lcd_write+0x28>
 14a:	25 b1       	in	r18, 0x05	; 5
 14c:	30 e1       	ldi	r19, 0x10	; 16
 14e:	83 9f       	mul	r24, r19
 150:	c0 01       	movw	r24, r0
 152:	11 24       	eor	r1, r1
 154:	92 2f       	mov	r25, r18
 156:	9f 70       	andi	r25, 0x0F	; 15
 158:	89 2b       	or	r24, r25
 15a:	85 b9       	out	0x05, r24	; 5
 15c:	85 b1       	in	r24, 0x05	; 5
 15e:	82 60       	ori	r24, 0x02	; 2
 160:	85 b9       	out	0x05, r24	; 5
 162:	00 00       	nop
 164:	85 b1       	in	r24, 0x05	; 5
 166:	8d 7f       	andi	r24, 0xFD	; 253
 168:	85 b9       	out	0x05, r24	; 5
 16a:	83 ef       	ldi	r24, 0xF3	; 243
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <lcd_write+0x4c>
 172:	00 c0       	rjmp	.+0      	; 0x174 <lcd_write+0x52>
 174:	00 00       	nop
 176:	08 95       	ret

00000178 <LCD_String>:
 178:	0f 93       	push	r16
 17a:	1f 93       	push	r17
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	8c 01       	movw	r16, r24
 182:	c0 e0       	ldi	r28, 0x00	; 0
 184:	d0 e0       	ldi	r29, 0x00	; 0
 186:	03 c0       	rjmp	.+6      	; 0x18e <LCD_String+0x16>
 188:	0e 94 91 00 	call	0x122	; 0x122 <lcd_write>
 18c:	21 96       	adiw	r28, 0x01	; 1
 18e:	f8 01       	movw	r30, r16
 190:	ec 0f       	add	r30, r28
 192:	fd 1f       	adc	r31, r29
 194:	80 81       	ld	r24, Z
 196:	81 11       	cpse	r24, r1
 198:	f7 cf       	rjmp	.-18     	; 0x188 <LCD_String+0x10>
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	1f 91       	pop	r17
 1a0:	0f 91       	pop	r16
 1a2:	08 95       	ret

000001a4 <LCD_String_xy>:
}
void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD with xy position */
{
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	ea 01       	movw	r28, r20
	if (row == 0 && pos<16)
 1aa:	81 11       	cpse	r24, r1
 1ac:	08 c0       	rjmp	.+16     	; 0x1be <LCD_String_xy+0x1a>
 1ae:	60 31       	cpi	r22, 0x10	; 16
 1b0:	30 f4       	brcc	.+12     	; 0x1be <LCD_String_xy+0x1a>
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
 1b2:	86 2f       	mov	r24, r22
 1b4:	8f 70       	andi	r24, 0x0F	; 15
 1b6:	80 68       	ori	r24, 0x80	; 128
 1b8:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_Command>
 1bc:	09 c0       	rjmp	.+18     	; 0x1d0 <LCD_String_xy+0x2c>
	else if (row == 1 && pos<16)
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	39 f4       	brne	.+14     	; 0x1d0 <LCD_String_xy+0x2c>
 1c2:	60 31       	cpi	r22, 0x10	; 16
 1c4:	28 f4       	brcc	.+10     	; 0x1d0 <LCD_String_xy+0x2c>
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
 1c6:	86 2f       	mov	r24, r22
 1c8:	8f 70       	andi	r24, 0x0F	; 15
 1ca:	80 6c       	ori	r24, 0xC0	; 192
 1cc:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_Command>
	LCD_String(str);		/* Call LCD string function */
 1d0:	ce 01       	movw	r24, r28
 1d2:	0e 94 bc 00 	call	0x178	; 0x178 <LCD_String>
}
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	08 95       	ret

000001dc <key_pressed>:
char * key_pressed(){
	
	    PORTD=0x01;
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	8b b9       	out	0x0b, r24	; 11
		if(PIND&0x10){ return "7";}
 1e0:	4c 99       	sbic	0x09, 4	; 9
 1e2:	3f c0       	rjmp	.+126    	; 0x262 <key_pressed+0x86>
		if(PIND&0x20){ return "8"; }
 1e4:	4d 99       	sbic	0x09, 5	; 9
 1e6:	40 c0       	rjmp	.+128    	; 0x268 <key_pressed+0x8c>
		if(PIND&0x40){ return "9"; }
 1e8:	4e 99       	sbic	0x09, 6	; 9
 1ea:	41 c0       	rjmp	.+130    	; 0x26e <key_pressed+0x92>
		if(PIND&0x80){ return "/"; }
 1ec:	4f 99       	sbic	0x09, 7	; 9
 1ee:	42 c0       	rjmp	.+132    	; 0x274 <key_pressed+0x98>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f0:	83 ec       	ldi	r24, 0xC3	; 195
 1f2:	99 e0       	ldi	r25, 0x09	; 9
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <key_pressed+0x18>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <key_pressed+0x1e>
 1fa:	00 00       	nop
		_delay_ms(10);
		PORTD=0x02;
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	8b b9       	out	0x0b, r24	; 11
		if(PIND&0x10){ return "4";}
 200:	4c 99       	sbic	0x09, 4	; 9
 202:	3b c0       	rjmp	.+118    	; 0x27a <key_pressed+0x9e>
		if(PIND&0x20){ return "5"; }
 204:	4d 99       	sbic	0x09, 5	; 9
 206:	3c c0       	rjmp	.+120    	; 0x280 <key_pressed+0xa4>
		if(PIND&0x40){ return "6"; }
 208:	4e 99       	sbic	0x09, 6	; 9
 20a:	3d c0       	rjmp	.+122    	; 0x286 <key_pressed+0xaa>
		if(PIND&0x80){ return "X"; }
 20c:	4f 99       	sbic	0x09, 7	; 9
 20e:	3e c0       	rjmp	.+124    	; 0x28c <key_pressed+0xb0>
 210:	83 ec       	ldi	r24, 0xC3	; 195
 212:	99 e0       	ldi	r25, 0x09	; 9
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <key_pressed+0x38>
 218:	00 c0       	rjmp	.+0      	; 0x21a <key_pressed+0x3e>
 21a:	00 00       	nop
		_delay_ms(10);
		PORTD=0x04;
 21c:	84 e0       	ldi	r24, 0x04	; 4
 21e:	8b b9       	out	0x0b, r24	; 11
		if(PIND&0x10){ return "1";}
 220:	4c 99       	sbic	0x09, 4	; 9
 222:	37 c0       	rjmp	.+110    	; 0x292 <key_pressed+0xb6>
		if(PIND&0x20){ return "2"; }
 224:	4d 99       	sbic	0x09, 5	; 9
 226:	38 c0       	rjmp	.+112    	; 0x298 <key_pressed+0xbc>
		if(PIND&0x40){ return "3"; }
 228:	4e 99       	sbic	0x09, 6	; 9
 22a:	39 c0       	rjmp	.+114    	; 0x29e <key_pressed+0xc2>
		if(PIND&0x80){ return "-"; }
 22c:	4f 99       	sbic	0x09, 7	; 9
 22e:	3a c0       	rjmp	.+116    	; 0x2a4 <key_pressed+0xc8>
 230:	83 ec       	ldi	r24, 0xC3	; 195
 232:	99 e0       	ldi	r25, 0x09	; 9
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <key_pressed+0x58>
 238:	00 c0       	rjmp	.+0      	; 0x23a <key_pressed+0x5e>
 23a:	00 00       	nop
		_delay_ms(10);
		PORTD=0x08;
 23c:	88 e0       	ldi	r24, 0x08	; 8
 23e:	8b b9       	out	0x0b, r24	; 11
		if(PIND&0x10){ return "c";}
 240:	4c 99       	sbic	0x09, 4	; 9
 242:	33 c0       	rjmp	.+102    	; 0x2aa <key_pressed+0xce>
		if(PIND&0x20){ return "0"; }
 244:	4d 99       	sbic	0x09, 5	; 9
 246:	34 c0       	rjmp	.+104    	; 0x2b0 <key_pressed+0xd4>
		if(PIND&0x40){ return "="; }
 248:	4e 99       	sbic	0x09, 6	; 9
 24a:	35 c0       	rjmp	.+106    	; 0x2b6 <key_pressed+0xda>
		if(PIND&0x80){ return "+"; }
 24c:	4f 99       	sbic	0x09, 7	; 9
 24e:	36 c0       	rjmp	.+108    	; 0x2bc <key_pressed+0xe0>
 250:	83 ec       	ldi	r24, 0xC3	; 195
 252:	99 e0       	ldi	r25, 0x09	; 9
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <key_pressed+0x78>
 258:	00 c0       	rjmp	.+0      	; 0x25a <key_pressed+0x7e>
 25a:	00 00       	nop
		_delay_ms(10);
		
		 return 0 ;
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	08 95       	ret
	LCD_String(str);		/* Call LCD string function */
}
char * key_pressed(){
	
	    PORTD=0x01;
		if(PIND&0x10){ return "7";}
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	91 e0       	ldi	r25, 0x01	; 1
 266:	08 95       	ret
		if(PIND&0x20){ return "8"; }
 268:	82 e0       	ldi	r24, 0x02	; 2
 26a:	91 e0       	ldi	r25, 0x01	; 1
 26c:	08 95       	ret
		if(PIND&0x40){ return "9"; }
 26e:	84 e0       	ldi	r24, 0x04	; 4
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	08 95       	ret
		if(PIND&0x80){ return "/"; }
 274:	86 e0       	ldi	r24, 0x06	; 6
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	08 95       	ret
		_delay_ms(10);
		PORTD=0x02;
		if(PIND&0x10){ return "4";}
 27a:	88 e0       	ldi	r24, 0x08	; 8
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	08 95       	ret
		if(PIND&0x20){ return "5"; }
 280:	8a e0       	ldi	r24, 0x0A	; 10
 282:	91 e0       	ldi	r25, 0x01	; 1
 284:	08 95       	ret
		if(PIND&0x40){ return "6"; }
 286:	8c e0       	ldi	r24, 0x0C	; 12
 288:	91 e0       	ldi	r25, 0x01	; 1
 28a:	08 95       	ret
		if(PIND&0x80){ return "X"; }
 28c:	8e e0       	ldi	r24, 0x0E	; 14
 28e:	91 e0       	ldi	r25, 0x01	; 1
 290:	08 95       	ret
		_delay_ms(10);
		PORTD=0x04;
		if(PIND&0x10){ return "1";}
 292:	80 e1       	ldi	r24, 0x10	; 16
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	08 95       	ret
		if(PIND&0x20){ return "2"; }
 298:	82 e1       	ldi	r24, 0x12	; 18
 29a:	91 e0       	ldi	r25, 0x01	; 1
 29c:	08 95       	ret
		if(PIND&0x40){ return "3"; }
 29e:	84 e1       	ldi	r24, 0x14	; 20
 2a0:	91 e0       	ldi	r25, 0x01	; 1
 2a2:	08 95       	ret
		if(PIND&0x80){ return "-"; }
 2a4:	86 e1       	ldi	r24, 0x16	; 22
 2a6:	91 e0       	ldi	r25, 0x01	; 1
 2a8:	08 95       	ret
		_delay_ms(10);
		PORTD=0x08;
		if(PIND&0x10){ return "c";}
 2aa:	88 e1       	ldi	r24, 0x18	; 24
 2ac:	91 e0       	ldi	r25, 0x01	; 1
 2ae:	08 95       	ret
		if(PIND&0x20){ return "0"; }
 2b0:	8a e1       	ldi	r24, 0x1A	; 26
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	08 95       	ret
		if(PIND&0x40){ return "="; }
 2b6:	8c e1       	ldi	r24, 0x1C	; 28
 2b8:	91 e0       	ldi	r25, 0x01	; 1
 2ba:	08 95       	ret
		if(PIND&0x80){ return "+"; }
 2bc:	8e e1       	ldi	r24, 0x1E	; 30
 2be:	91 e0       	ldi	r25, 0x01	; 1
		_delay_ms(10);
		
		 return 0 ;
		
}
 2c0:	08 95       	ret

000002c2 <main>:
void lcd_write(unsigned char data);
void LCD_Command(unsigned char cmd);
void LCD_String_xy (char row, char pos, char *str);
char* key_pressed();
int main(void)
{
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	cd b7       	in	r28, 0x3d	; 61
 2c8:	de b7       	in	r29, 0x3e	; 62
 2ca:	2f 97       	sbiw	r28, 0x0f	; 15
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	f8 94       	cli
 2d0:	de bf       	out	0x3e, r29	; 62
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	cd bf       	out	0x3d, r28	; 61
	char arr[2][5];
	char arr2[5];
	char snum[5];
    DDRB=0xff;
 2d6:	8f ef       	ldi	r24, 0xFF	; 255
 2d8:	84 b9       	out	0x04, r24	; 4
	DDRC=0xFF;
 2da:	87 b9       	out	0x07, r24	; 7
	DDRD=0x0f;
 2dc:	8f e0       	ldi	r24, 0x0F	; 15
 2de:	8a b9       	out	0x0a, r24	; 10
	init_LCD();
 2e0:	0e 94 76 00 	call	0xec	; 0xec <init_LCD>
 2e4:	87 ea       	ldi	r24, 0xA7	; 167
 2e6:	91 e6       	ldi	r25, 0x61	; 97
 2e8:	01 97       	sbiw	r24, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <main+0x26>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <main+0x2c>
 2ee:	00 00       	nop
	_delay_ms(100);
	int i=0,j=0,num1,num2,result,num=0;
 2f0:	e1 2c       	mov	r14, r1
 2f2:	f1 2c       	mov	r15, r1
 2f4:	00 e0       	ldi	r16, 0x00	; 0
 2f6:	10 e0       	ldi	r17, 0x00	; 0
	int add_state=0;
	unsigned char val,count1=0,count2=0,count3=0,count4=0;
    while (1) 
    {   
		   
          if (key_pressed()!=0)
 2f8:	0e 94 ee 00 	call	0x1dc	; 0x1dc <key_pressed>
 2fc:	89 2b       	or	r24, r25
 2fe:	e1 f3       	breq	.-8      	; 0x2f8 <main+0x36>
          {   
			   if(key_pressed()=="+"||key_pressed()=="-"||key_pressed()=="/"||key_pressed()=="X"){ LCD_String_xy(0,i,key_pressed()); num++; opera=key_pressed(); }
 300:	0e 94 ee 00 	call	0x1dc	; 0x1dc <key_pressed>
 304:	8e 51       	subi	r24, 0x1E	; 30
 306:	91 40       	sbci	r25, 0x01	; 1
 308:	79 f0       	breq	.+30     	; 0x328 <main+0x66>
 30a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <key_pressed>
 30e:	86 51       	subi	r24, 0x16	; 22
 310:	91 40       	sbci	r25, 0x01	; 1
 312:	51 f0       	breq	.+20     	; 0x328 <main+0x66>
 314:	0e 94 ee 00 	call	0x1dc	; 0x1dc <key_pressed>
 318:	86 50       	subi	r24, 0x06	; 6
 31a:	91 40       	sbci	r25, 0x01	; 1
 31c:	29 f0       	breq	.+10     	; 0x328 <main+0x66>
 31e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <key_pressed>
 322:	8e 50       	subi	r24, 0x0E	; 14
 324:	91 40       	sbci	r25, 0x01	; 1
 326:	69 f4       	brne	.+26     	; 0x342 <main+0x80>
 328:	0e 94 ee 00 	call	0x1dc	; 0x1dc <key_pressed>
 32c:	ac 01       	movw	r20, r24
 32e:	60 2f       	mov	r22, r16
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_String_xy>
 336:	8f ef       	ldi	r24, 0xFF	; 255
 338:	e8 1a       	sub	r14, r24
 33a:	f8 0a       	sbc	r15, r24
 33c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <key_pressed>
 340:	d8 2e       	mov	r13, r24
			   if (key_pressed()=="=")
 342:	0e 94 ee 00 	call	0x1dc	; 0x1dc <key_pressed>
 346:	8c 51       	subi	r24, 0x1C	; 28
 348:	91 40       	sbci	r25, 0x01	; 1
 34a:	e9 f4       	brne	.+58     	; 0x386 <main+0xc4>
			   {   
				   num1=atoi(arr[0]);
 34c:	ce 01       	movw	r24, r28
 34e:	01 96       	adiw	r24, 0x01	; 1
 350:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <atoi>
 354:	5c 01       	movw	r10, r24
				   num2=atoi(arr[1]);
 356:	ce 01       	movw	r24, r28
 358:	06 96       	adiw	r24, 0x06	; 6
 35a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <atoi>
				   if(opera=="+"){ result=num1+num2; itoa(result, snum, 10); LCD_String_xy(1,7,snum);}
 35e:	2d 2d       	mov	r18, r13
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	2e 51       	subi	r18, 0x1E	; 30
 364:	31 40       	sbci	r19, 0x01	; 1
 366:	79 f4       	brne	.+30     	; 0x386 <main+0xc4>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 368:	4a e0       	ldi	r20, 0x0A	; 10
 36a:	be 01       	movw	r22, r28
 36c:	65 5f       	subi	r22, 0xF5	; 245
 36e:	7f 4f       	sbci	r23, 0xFF	; 255
 370:	8a 0d       	add	r24, r10
 372:	9b 1d       	adc	r25, r11
 374:	0e 94 1c 02 	call	0x438	; 0x438 <__itoa_ncheck>
 378:	ae 01       	movw	r20, r28
 37a:	45 5f       	subi	r20, 0xF5	; 245
 37c:	5f 4f       	sbci	r21, 0xFF	; 255
 37e:	67 e0       	ldi	r22, 0x07	; 7
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_String_xy>
				   
			   }
			   LCD_String_xy(0,i,key_pressed());
 386:	0e 94 ee 00 	call	0x1dc	; 0x1dc <key_pressed>
 38a:	ac 01       	movw	r20, r24
 38c:	60 2f       	mov	r22, r16
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_String_xy>
			   i++;
 394:	0f 5f       	subi	r16, 0xFF	; 255
 396:	1f 4f       	sbci	r17, 0xFF	; 255
			   strcat(arr[num],key_pressed());
 398:	0e 94 ee 00 	call	0x1dc	; 0x1dc <key_pressed>
 39c:	97 01       	movw	r18, r14
 39e:	22 0f       	add	r18, r18
 3a0:	33 1f       	adc	r19, r19
 3a2:	22 0f       	add	r18, r18
 3a4:	33 1f       	adc	r19, r19
 3a6:	2e 0d       	add	r18, r14
 3a8:	3f 1d       	adc	r19, r15
 3aa:	bc 01       	movw	r22, r24
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	8c 0f       	add	r24, r28
 3b2:	9d 1f       	adc	r25, r29
 3b4:	82 0f       	add	r24, r18
 3b6:	93 1f       	adc	r25, r19
 3b8:	0e 94 11 02 	call	0x422	; 0x422 <strcat>
			   LCD_String_xy(1,0,arr[0]);
 3bc:	ae 01       	movw	r20, r28
 3be:	4f 5f       	subi	r20, 0xFF	; 255
 3c0:	5f 4f       	sbci	r21, 0xFF	; 255
 3c2:	60 e0       	ldi	r22, 0x00	; 0
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_String_xy>
			   LCD_String_xy(1,4,arr[1]);
 3ca:	ae 01       	movw	r20, r28
 3cc:	4a 5f       	subi	r20, 0xFA	; 250
 3ce:	5f 4f       	sbci	r21, 0xFF	; 255
 3d0:	64 e0       	ldi	r22, 0x04	; 4
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_String_xy>
 3d8:	83 e2       	ldi	r24, 0x23	; 35
 3da:	94 ef       	ldi	r25, 0xF4	; 244
 3dc:	01 97       	sbiw	r24, 0x01	; 1
 3de:	f1 f7       	brne	.-4      	; 0x3dc <main+0x11a>
 3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <main+0x120>
 3e2:	00 00       	nop
 3e4:	89 cf       	rjmp	.-238    	; 0x2f8 <main+0x36>

000003e6 <atoi>:
 3e6:	fc 01       	movw	r30, r24
 3e8:	88 27       	eor	r24, r24
 3ea:	99 27       	eor	r25, r25
 3ec:	e8 94       	clt
 3ee:	21 91       	ld	r18, Z+
 3f0:	20 32       	cpi	r18, 0x20	; 32
 3f2:	e9 f3       	breq	.-6      	; 0x3ee <atoi+0x8>
 3f4:	29 30       	cpi	r18, 0x09	; 9
 3f6:	10 f0       	brcs	.+4      	; 0x3fc <atoi+0x16>
 3f8:	2e 30       	cpi	r18, 0x0E	; 14
 3fa:	c8 f3       	brcs	.-14     	; 0x3ee <atoi+0x8>
 3fc:	2b 32       	cpi	r18, 0x2B	; 43
 3fe:	41 f0       	breq	.+16     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 400:	2d 32       	cpi	r18, 0x2D	; 45
 402:	39 f4       	brne	.+14     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 404:	68 94       	set
 406:	04 c0       	rjmp	.+8      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 408:	0e 94 27 02 	call	0x44e	; 0x44e <__mulhi_const_10>
 40c:	82 0f       	add	r24, r18
 40e:	91 1d       	adc	r25, r1
 410:	21 91       	ld	r18, Z+
 412:	20 53       	subi	r18, 0x30	; 48
 414:	2a 30       	cpi	r18, 0x0A	; 10
 416:	c0 f3       	brcs	.-16     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 418:	1e f4       	brtc	.+6      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 41a:	90 95       	com	r25
 41c:	81 95       	neg	r24
 41e:	9f 4f       	sbci	r25, 0xFF	; 255
 420:	08 95       	ret

00000422 <strcat>:
 422:	fb 01       	movw	r30, r22
 424:	dc 01       	movw	r26, r24
 426:	0d 90       	ld	r0, X+
 428:	00 20       	and	r0, r0
 42a:	e9 f7       	brne	.-6      	; 0x426 <strcat+0x4>
 42c:	11 97       	sbiw	r26, 0x01	; 1
 42e:	01 90       	ld	r0, Z+
 430:	0d 92       	st	X+, r0
 432:	00 20       	and	r0, r0
 434:	e1 f7       	brne	.-8      	; 0x42e <strcat+0xc>
 436:	08 95       	ret

00000438 <__itoa_ncheck>:
 438:	bb 27       	eor	r27, r27
 43a:	4a 30       	cpi	r20, 0x0A	; 10
 43c:	31 f4       	brne	.+12     	; 0x44a <__itoa_ncheck+0x12>
 43e:	99 23       	and	r25, r25
 440:	22 f4       	brpl	.+8      	; 0x44a <__itoa_ncheck+0x12>
 442:	bd e2       	ldi	r27, 0x2D	; 45
 444:	90 95       	com	r25
 446:	81 95       	neg	r24
 448:	9f 4f       	sbci	r25, 0xFF	; 255
 44a:	0c 94 30 02 	jmp	0x460	; 0x460 <__utoa_common>

0000044e <__mulhi_const_10>:
 44e:	7a e0       	ldi	r23, 0x0A	; 10
 450:	97 9f       	mul	r25, r23
 452:	90 2d       	mov	r25, r0
 454:	87 9f       	mul	r24, r23
 456:	80 2d       	mov	r24, r0
 458:	91 0d       	add	r25, r1
 45a:	11 24       	eor	r1, r1
 45c:	08 95       	ret

0000045e <__utoa_ncheck>:
 45e:	bb 27       	eor	r27, r27

00000460 <__utoa_common>:
 460:	fb 01       	movw	r30, r22
 462:	55 27       	eor	r21, r21
 464:	aa 27       	eor	r26, r26
 466:	88 0f       	add	r24, r24
 468:	99 1f       	adc	r25, r25
 46a:	aa 1f       	adc	r26, r26
 46c:	a4 17       	cp	r26, r20
 46e:	10 f0       	brcs	.+4      	; 0x474 <__utoa_common+0x14>
 470:	a4 1b       	sub	r26, r20
 472:	83 95       	inc	r24
 474:	50 51       	subi	r21, 0x10	; 16
 476:	b9 f7       	brne	.-18     	; 0x466 <__utoa_common+0x6>
 478:	a0 5d       	subi	r26, 0xD0	; 208
 47a:	aa 33       	cpi	r26, 0x3A	; 58
 47c:	08 f0       	brcs	.+2      	; 0x480 <__utoa_common+0x20>
 47e:	a9 5d       	subi	r26, 0xD9	; 217
 480:	a1 93       	st	Z+, r26
 482:	00 97       	sbiw	r24, 0x00	; 0
 484:	79 f7       	brne	.-34     	; 0x464 <__utoa_common+0x4>
 486:	b1 11       	cpse	r27, r1
 488:	b1 93       	st	Z+, r27
 48a:	11 92       	st	Z+, r1
 48c:	cb 01       	movw	r24, r22
 48e:	0c 94 49 02 	jmp	0x492	; 0x492 <strrev>

00000492 <strrev>:
 492:	dc 01       	movw	r26, r24
 494:	fc 01       	movw	r30, r24
 496:	67 2f       	mov	r22, r23
 498:	71 91       	ld	r23, Z+
 49a:	77 23       	and	r23, r23
 49c:	e1 f7       	brne	.-8      	; 0x496 <strrev+0x4>
 49e:	32 97       	sbiw	r30, 0x02	; 2
 4a0:	04 c0       	rjmp	.+8      	; 0x4aa <strrev+0x18>
 4a2:	7c 91       	ld	r23, X
 4a4:	6d 93       	st	X+, r22
 4a6:	70 83       	st	Z, r23
 4a8:	62 91       	ld	r22, -Z
 4aa:	ae 17       	cp	r26, r30
 4ac:	bf 07       	cpc	r27, r31
 4ae:	c8 f3       	brcs	.-14     	; 0x4a2 <strrev+0x10>
 4b0:	08 95       	ret

000004b2 <_exit>:
 4b2:	f8 94       	cli

000004b4 <__stop_program>:
 4b4:	ff cf       	rjmp	.-2      	; 0x4b4 <__stop_program>
